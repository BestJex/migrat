基于RBAC模型的用户角色权限管理：

SAAS平台管理员：负责平台的日常维护和管理，包括用户的日志，租户账号审核，租户状态的审核，租户费用审核，平台管理员不能对租户的具体业务进行访问

企业租户：访问SAAS平台的用户企业，在SAAS平台中各租户之间相互独立

租户管理员：为租户角色分配权限和相关系统管理、维护

租户角色：根据业务功能租户管理员进行角色划分，划分角色之后，租户管理员可以对相应的角色进行权限分配

租户用户：需要对租户用户进行角色分配，租户用户只能访问授权的模块信息

SAAS权限控制方式： 用户--角色--权限--资源 [菜单访问权限，按钮访问权限，接口访问权限]

------------------------------------------------

需要清楚shiro缓存的地方：

1、更新用户【更新了角色】 —> 【更新了权限】

2、更新角色【更新了权限】

3、更新菜单，删除菜单


-----------------------------------------------
多租户库的路由和租户数据的隔离

1、暂定100个租户为一个数据库，这样可以横向扩容
   数据库的分区： 
   			 独立数据库
   			 同一个数据库，不同的schema
   			 

2、路由到指定的数据库后，通过sql拦截器进行CRUD的数据隔离操作

------------------------------------------------
采购方和工厂方的数据库路由： N : N

原则： 保证SAAS平台租户的数据可以横向拓展，工厂的数据可以统一管理所有的采购方数据
     
	①以采购方的tenantId来进行库的划分，按10个租户一个库的原则进行数据的划分
	②工厂方分为数据的录入和数据的查询

实现：
	①采购方录入订单,可以通过平台线上录入，工厂方平台录入，开放接口对接3中方式，作为订单的入口录入SAAS平台
	②工厂方可以自产所有的外购订单，也可以将部分[部分外发]或全部[代理商的角色]订单进行外发
	  |1. 全部自产的情况，租户和工厂就是1 : 1的情况，工厂的数据根据当前订单所属租户路由到指定的数据库
	  |2. 工厂部分或者全部外发，被外发的一方定义为分为两种情况，不申请为租户和申请为租户
	      |2.1 不申请为租户： 那么该用户也是属于上一级租户，只是属于不同的角色，生产的跟踪数据由他本人录入，不具体管控他委托的工厂方
	      |2.2 申请为租户： 该用户有上一级租户，同时他有对应的工厂委托方，该系统的费用由当前租户出，当前系统录入的数据后，根据上级租户
	           逆向更新工厂生产数据，数据的录入通过扫码的方式进行录入	
